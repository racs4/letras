# Performance tests for various native functions. Unlike other modules in
# this directory these tests are not representative of RapydScript itself,
# but they're useful to understand when writing new modules or baselib
# functionality for RapydScript. When possible, replace the slower logic
# with more performant equivalents. Keep in mind that performance may vary
# somewhat depending on platform-specific implementation, I would ignore any
# differences smaller than 20% for that reason.
# Author: Alexander Tsepkov

hash = {foo: 1, bar: 2, baz: 3, qux: 4, quux: 5}
arr = [1 to 10]
string = 'baz'
str2 = Array(1000).join('x')
c = 1

bench.add('===', def():
    JS('1 === 1')
)
bench.add('==', def():
    JS('1 == 1')
)

# hashes
bench.add('hasOwnProperty', def():
    JS('hash.hasOwnProperty("baz")')
)
bench.add('Object.keys', def():
    JS('Object.keys(hash)')
)
bench.add('for in', def():
    JS('for (var i in hash) {}')
)

# slices
bench.add('slice(-1)', def():
    JS('arr.slice(-1)')
)
bench.add('[array.length-1]', def():
    JS('arr[arr.length-1]')
)

# undefined checks
bench.add('typeof a === "undefined"', def():
    JS('typeof arr === "undefined"')
)
bench.add('a === undefined', def():
    JS('arr === undefined')
)
bench.add('a === void 0', def():
    JS('arr === void 0')
)

# incrementors
bench.add('c += 1', def():
    JS('c += 1')
)
bench.add('++c', def():
    JS('++c')
)
bench.add('str.substr', def():
    JS('str2.substr(50)')
)
bench.add('str.substring', def():
    JS('str2.substring(50)')
)
bench.add('str.slice', def():
    JS('str2.slice(50)')
)
