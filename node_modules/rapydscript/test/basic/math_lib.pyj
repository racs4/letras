import math

assert.equal(math.ceil(4.2), 5)
assert.equal(math.floor(4.2), 4)
assert.equal(math.fabs(-6), 6)
assert.equal(math.copysign(-5, 7), 5)
assert.equal(math.factorial(4), 24)
assert.equal(math.fmod(-1e-100, 1e100), -1e-100)

d = [0.9999999, 1, 2, 3]
assert.equal(math.fsum(d), 6.9999999)   # compare this to sum(d), which will output 6.999999900000001
assert(math.isinf(5) == False)
assert(math.isinf(Infinity) == True)
assert.deepEqual(math.modf(5.5), [0.5, 5])
assert.equal(math.trunc(2.6), 2)
assert.equal(math.trunc(-2.6), -2)
assert.equal(math.exp(1e-5) - math.expm1(1e-5), 1) # checks for lack of error due to rounding
assert.equal(math.log(10), 2.302585092994046)
assert.equal(math.log(10, 1000), 0.33333333333333337)
assert.equal(math.log1p(1e-15), 9.999999999999995e-16)
#assert.equal(math.log1p(1), 0.6931471805599453) # <--- fails for now, based on php's less accurate implementation
assert.equal(math.log10(1000), math.log(1000, 10))
assert.equal(math.pow(1, 0), 1)
assert.equal(math.pow(1, NaN), 1)
assert.equal(math.pow(0, 0), 1)
assert.equal(math.pow(NaN, 0), 1)
assert.equal(math.pow(4,3), 64)
assert.equal(math.pow(100, -2), 0.0001)
assert.equal(math.hypot(3,4), 5)
assert.equal(math.acosh(2), 1.3169578969248166)
assert.equal(math.asinh(1), 0.8813735870195429)
assert.equal(math.atanh(0.5), 0.5493061443340549)
assert.equal(math.cosh(1), 1.5430806348152437)
assert.equal(math.cosh(-1), 1.5430806348152437)
assert.equal(math.sinh(1), 1.1752011936438014)
assert.equal(math.tanh(1), 0.7615941559557649)
